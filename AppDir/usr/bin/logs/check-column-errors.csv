"2025-07-25T21:20:14.065Z","// scripts/cockpit/check-columns-batch.js","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const fs = require('fs');","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const path = require('path');","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const readline = require('readline');","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const { Sequelize, DataTypes } = require('sequelize');","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const config = require('../../config/config.js')['development'];","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const sequelize = new Sequelize(config);","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const qi = sequelize.getQueryInterface();","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const inputCsv = process.argv[2];","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const logPath = path.resolve(__dirname, '../../logs/check-column.csv');","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const color = (code, text) => `\x1b[${code}m${text}\x1b[0m`;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const now = new Date().toISOString();","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(36, `🚦 Auditoría batch desde: ${inputCsv}`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(90, `🕒 Fecha: ${now}`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log('─'.repeat(60));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const rl = readline.createInterface({","error-linea-invalid"
"2025-07-25T21:20:14.065Z","input: fs.createReadStream(inputCsv),","error-linea-invalid"
"2025-07-25T21:20:14.065Z","crlfDelay: Infinity,","error-linea-invalid"
"2025-07-25T21:20:14.065Z","});","error-linea-invalid"
"2025-07-25T21:20:14.065Z","let total = 0;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","let creadas = 0;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","let existentes = 0;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","rl.on('line', async (line) => {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","if (line.startsWith('tabla')) return;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const [tabla","columna","tipo] = line.split('","No description found for "const [tabla" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-25T21:20:14.065Z","try {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","const table = await qi.describeTable(tabla);","error-linea-invalid"
"2025-07-25T21:20:14.065Z","if (table[columna]) {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(32, `✅ ${tabla}.${columna} ya existe (${tipo})`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","existentes++;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","fs.appendFileSync(logPath","`"${now}"",""${tabla}"","No description found for "fs.appendFileSync(logPath" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-25T21:20:14.065Z","} else {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(33, `🟡 ${tabla}.${columna} NO existe. Creando...`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","await qi.addColumn(tabla","columna","{ type: DataTypes[tipo] });","No description found for "await qi.addColumn(tabla" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-25T21:20:14.065Z","console.log(color(36, `🛠️ ${columna} creada en ${tabla}`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","creadas++;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","fs.appendFileSync(logPath","`"${now}"",""${tabla}"","No description found for "fs.appendFileSync(logPath" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-25T21:20:14.065Z","}","error-linea-invalid"
"2025-07-25T21:20:14.065Z","total++;","error-linea-invalid"
"2025-07-25T21:20:14.065Z","} catch (err) {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.error(color(31","`❌ Error en ${tabla}.${columna}:`)","err);","No description found for "console.error(color(31" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-25T21:20:14.065Z","}","error-linea-invalid"
"2025-07-25T21:20:14.065Z","});","error-linea-invalid"
"2025-07-25T21:20:14.065Z","rl.on('close', () => {","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log('\n' + color(36, '📊 Auditoría finalizada'));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(90, `🔢 Total: ${total} columnas auditadas`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(32, `✅ Existentes: ${existentes}`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(33, `🛠️ Creadas: ${creadas}`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","console.log(color(36, `📝 Log guardado en logs/check-column.csv`));","error-linea-invalid"
"2025-07-25T21:20:14.065Z","sequelize.close();","error-linea-invalid"
"2025-07-25T21:20:14.065Z","});","error-linea-invalid"
"2025-07-25T21:24:14.510Z","usuarios","uuid","UUID","No description found for "usuarios" table. Check the table name and schema; remember, they _are_ case sensitive."
"2025-07-28T23:04:00.584Z","transacciones","productoId","STRING","password authentication failed for user "usuario""
"2025-07-28T23:04:00.584Z","transacciones","estado","BOOLEAN","password authentication failed for user "usuario""
"2025-07-28T23:04:00.584Z","usuarios","uuid","UUID","password authentication failed for user "usuario""
