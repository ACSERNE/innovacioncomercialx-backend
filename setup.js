const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

const repoFolder = path.join(__dirname, 'innovacioncomercialx-backend');

if (!fs.existsSync(repoFolder)) {
  console.log('‚úÖ No se detect√≥ carpeta clonada. Todo listo.');
  process.exit(0);
}

console.log('‚ö†Ô∏è  Se detect√≥ carpeta clonada: innovacioncomercialx-backend');
console.log('¬øQu√© deseas hacer?\n');
console.log('1Ô∏è‚É£  Trabajar desde la carpeta clonada');
console.log('2Ô∏è‚É£  Reemplazar tu estructura actual con la del repositorio');
console.log('3Ô∏è‚É£  Cancelar y decidir manualmente\n');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Selecciona una opci√≥n (1, 2 o 3): ', answer => {
  switch (answer.trim()) {
    case '1':
      console.log('\nüß≠ Abriendo entorno desde carpeta clonada...');
      try {
        process.chdir(repoFolder);
        execSync('node index.js', { stdio: 'inherit' });
      } catch (err) {
        console.log(`‚ùå Error al ejecutar index.js: ${err.message}`);
      }
      break;

    case '2':
      console.log('\nüîÅ Reemplazando estructura actual...');
      const folders = fs.readdirSync(repoFolder);
      folders.forEach(item => {
        const src = path.join(repoFolder, item);
        const dest = path.join(__dirname, item);
        if (fs.existsSync(dest)) {
          console.log(`‚ö†Ô∏è  Ya existe: ${item} ‚Äî no se sobrescribir√°`);
        } else {
          execSync(`mv "${src}" "${dest}"`);
          console.log(`‚úÖ Movido: ${item}`);
        }
      });
      console.log('\nüßπ Eliminando carpeta clonada...');
      execSync(`rmdir "${repoFolder}"`);
      console.log('‚úÖ Reorganizaci√≥n completa.');
      break;

    default:
      console.log('\n‚èπÔ∏è Operaci√≥n cancelada. Puedes decidir manualmente.');
  }

  rl.close();
});
